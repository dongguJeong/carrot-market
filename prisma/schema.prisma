
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User{
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  avatar String? 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tokens  SMSToken[]
  products Product[]
  posts Post[]
  comments Comment[]
  likes Like[]
  chat_rooms ChatRoom[]
  messages Message[]
  livestreams LiveStream[]
}

model SMSToken{
  id Int @id @default(autoincrement())
  token String @unique 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}
model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  comments Comment[]
  likes Like[]
}



model Comment {
  id Int @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  post Post @relation(fields: [postId],  references: [id], onDelete: Cascade)
  postId Int
}

model Like {

  @@id(name : "id",[userId, postId])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  post Post @relation(fields: [postId],  references: [id], onDelete: Cascade)
  postId Int

}

model ChatRoom{
  id String @id @default(cuid())
  users User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

model Message{
  id Int @id @default(autoincrement())
  payload String

  chatRoomId String
  userId Int
  room ChatRoom @relation(fields: [chatRoomId] , references: [id])
  user User @relation(fields: [userId] , references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model LiveStream{
  id Int @id @default(autoincrement())
  title String
  stream_key String
  stream_id String

  userId Int
  user User @relation(fields: [userId] , references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}